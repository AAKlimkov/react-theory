{"version":3,"sources":["Car/Car.js","App.js","registerServiceWorker.js","index.js"],"names":["Radium","props","inputClasses","name","length","push","className","style","boxShadow","border","cursor","year","type","onChange","onChangeName","value","join","onClick","onDelete","App","state","cars","pageTitle","showCars","toggleCarsHandler","setState","index","car","this","splice","map","Car","event","target","deleteHandler","bind","textAlign","width","margin","paddingTop","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7e39d949.chunk.js","sourcesContent":["import React from 'react'\nimport Radium from 'radium'\nimport './car.scss'\n\nconst car = props =>{\n  const inputClasses = ['input']\n  if(props.name.length){\n    inputClasses.push('green')\n  } else {\n    inputClasses.push('red')\n  }\n  if(props.name.length > 4){\n    inputClasses.push('bold')\n  }\n  const style = {\n    boxShadow: '0 4px 5px 0 rgba(0, 0, 0, .14)',\n    border: '3px solid #aaa',\n    ':hover':{\n      border: '2px solid #aaa',\n      boxShadow: '0 8px 15px 4px rgba(0, 0, 0, 0.8)',\n      cursor: 'pointer'\n    }\n  }\n   return (\n  <div className = 'car' style = {style}>\n    <h3>Ð¡ar name: {props.name}</h3>\n    <p>Year: <strong>{props.year}</strong></p>\n    <input\n    type=\"text\"\n    onChange = {props.onChangeName}\n    value = {props.name}\n    className = {inputClasses.join(' ')}\n    />\n    <button onClick={props.onDelete}>Delete</button>\n  </div>\n)}\nexport default Radium(car)","import React, { Component } from 'react';\nimport './App.scss';\nimport Car from './Car/Car'\n\nclass App extends Component {\n\n  state = {\n    cars: [\n      {name: 'Ford', year: 2018},\n      {name: 'Audi', year: 2016},\n      {name: 'Mazda', year: 2010}\n    ],\n    pageTitle: 'React components',\n    showCars: true\n  }\n\n  toggleCarsHandler = () => {\n    this.setState({\n      showCars: !this.state.showCars\n    })\n  }\n\n  onChangeName = (name,index) => {\n    const car = this.state.cars[index]\n    car.name = name\n    const cars = [...this.state.cars]\n    cars[index] = car\n    this.setState({cars})\n  }\n  deleteHandler(index){\n    const cars = [...this.state.cars]\n    cars.splice(index, 1)\n    this.setState({cars})\n    }\n\n  render() {\n    const divStyle = {\n      textAlign: 'center'\n    }\n\n    let cars = null\n\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n        return (\n          <Car\n            key={index}\n            name={car.name}\n            year={car.year}\n            onChangeName={event => this.onChangeName(event.target.value,index)}\n            onDelete = {this.deleteHandler.bind(this,index)}\n          />\n        )\n      })\n    }\n\n    return (\n      <div style={divStyle}>\n        <h1>{this.state.pageTitle}</h1>\n\n        <button\n          onClick={this.toggleCarsHandler}\n        >Toggle cars</button>\n\n        <div style = {{\n          width: 400,\n          margin: 'auto',\n          paddingTop: '10px'\n        }}>\n          { cars }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}